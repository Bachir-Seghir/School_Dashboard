generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @unique
  username String @unique
}

model Student {
  id          String       @id @unique
  username    String       @unique
  firstName   String
  lastName    String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  attendances Attendance[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
}

model Parent {
  id        String    @id @unique
  username  String    @unique
  firstName String
  lastName  String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Teacher {
  id        String    @id @unique
  username  String    @unique
  firstName String
  lastName  String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  birthday  DateTime
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  day         Day
  subjectId   Int
  classId     Int
  teacherId   String
  endTime     DateTime
  name        String       @unique
  startTime   DateTime
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Class {
  id            Int            @id @default(autoincrement())
  supervisorId  String?
  gradeId       Int
  capacity      Int
  name          String         @unique
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     String
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  present   Boolean
  lessonId  Int
  studentId String
  date      DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
